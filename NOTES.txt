A: After making the image on the SD card:

Working on the boot directory of the SD Card
1) copy files from raspberry-pi_setup directory to boot directory for wifi and ssh
* wpa_supplicant.conf
* ssh

2) update files on the SD Card for usb connection
* https://learn.adafruit.com/turning-your-raspberry-pi-zero-into-a-usb-gadget/ethernet-gadget
** config.txt: Add 'dtoverlay=dwc2' as the last line.
** cmdline.txt: Add ' modules-load=dwc2,g_ether' after 'rootwait' (e.g. 'rootwait modules-load=dwc2,g_ether').


B: Plug Pi into Laptop USB then once pi has booted up:

1) update
> sudo apt-get update
> sudo apt-get upgrade


2) enable interfaces (i2c and spi)
# https://learn.adafruit.com/circuitpython-on-raspberrypi-linux/installing-circuitpython-on-raspberry-pi
> sudo pip3 install --upgrade setuptools
> sudo apt-get install -y python-smbus
> sudo apt-get install -y i2c-tools

# activate interfaces
> sudo raspi-config
---- Interfacing Options
------ I2C
-------- Yes
---------- Yes
---- Interfacing Options
------ SPI
-------- Yes
---------- Yes

# REBOOT pi
> sudo reboot

# Test I2C (only shows something if an I2C device is attached)
> sudo i2cdetect -y 1
# Test SPI
> ls -l /dev/spidev*

# For OLED (and other things possibly)
3) install adafruit-blinka
> sudo pip3 install adafruit-blinka

4) install Pi OLED library
> sudo pip3 install adafruit-circuitpython-ssd1306


5) Setting up the tornado server used for Websockets
> sudo pip3 install tornado

** IMPORTANT **: COPY the 'pi-zero-websockets-sensors' directory to pi's home directory
# set up to start server automatically on startup
# from: https://learn.sparkfun.com/tutorials/how-to-run-a-raspberry-pi-program-on-startup
# Edit /etc/rc.local (the easy way)
> sudo nano /etc/rc.local
ADD THE LINES (before 'exit 0' ):
 /usr/bin/python3 /home/pi/pi-zero-websockets-sensors/server.py 2> /home/pi/error.log &
 /usr/bin/python3 /home/pi/pi-zero-websockets-sensors/measure_distance.py  &

===XXXX: Dont' Do===
# Create a systemd service (the hard but more robust way)
# Create file 'sensorPi.service' and add information from sensorPi.service file in this directory
> sudo nano /lib/systemd/sensorPi.service
==XXXX===

5)



# for finding the pi on the network easily
# https://thepihut.com/blogs/raspberry-pi-tutorials/19668676-renaming-your-raspberry-pi-the-hostname
6) Rename Pi: use nano to rename pi. (optional)
# Default name is 'raspberrypi' replace with new hostname.
# Only use regular letters and numbers for new name.
#  (e.g. 'SensorPi1')
> sudo nano /etc/hostname
# Also update /etc/hosts
> sudo nano /etc/hosts

6) Restart for everything to take effect
> sudo reboot


# If you need to kill the server (and it's the only thing running with python3)
# https://unix.stackexchange.com/questions/104821/how-to-terminate-a-background-process
> pgrep python3
# this will give you the process id, a three digit number 'nnn'. To kill use:
> sudo kill nnn


# Refs:
# OLED: http://codelectron.com/setup-oled-display-raspberry-pi-python/
#* https://learn.adafruit.com/adafruit-pioled-128x32-mini-oled-for-raspberry-pi/usage
